-------------------------------------------------------------------------------
-- Title      : Components package (generated by Emacs VHDL Mode 3.38.1)
-- Project    :
-------------------------------------------------------------------------------
-- File       : components.vhd
-- Author     : Arooj Asif  <arooj.asif@desy.de>
-- Company    : DESY
-- Created    : 2025-04-06
-- Last update: 2025-04-07
-- Platform   :
-- Standard   : VHDL'08
-------------------------------------------------------------------------------
-- Description:
-------------------------------------------------------------------------------
-- Copyright (c) 2025 DESY
-------------------------------------------------------------------------------
-- Revisions  :
-- Date        Version  Author  Description
-- 2025-04-06  1.0      desimone    Created
-------------------------------------------------------------------------------

library ieee;
context ieee.ieee_std_context;

library ieee;
context ieee.ieee_std_context;

package components is

    -----------------------------------------------------------------------------
    -- Component declarations
    -----------------------------------------------------------------------------

    component eth_mac_mii_fifo is
        generic (
            TARGET                     : string := "GENERIC";
            CLOCK_INPUT_STYLE          : string := "BUFIO2";
            AXIS_DATA_WIDTH            : integer := 8;
            AXIS_KEEP_ENABLE           : integer := 1;
            AXIS_KEEP_WIDTH            : integer := 1;
            ENABLE_PADDING             : boolean := True;
            MIN_FRAME_LENGTH           : integer := 64;
            TX_FIFO_DEPTH              : integer := 4096;
            TX_FIFO_RAM_PIPELINE       : integer := 1;
            TX_FRAME_FIFO              : boolean := True;
            TX_DROP_OVERSIZE_FRAME     : integer := 1;
            TX_DROP_BAD_FRAME          : integer := 1;
            TX_DROP_WHEN_FULL          : integer := 0;
            RX_FIFO_DEPTH              : integer := 4096;
            RX_FIFO_RAM_PIPELINE       : integer := 1;
            RX_FRAME_FIFO              : boolean := True;
            RX_DROP_OVERSIZE_FRAME     : integer := 1;
            RX_DROP_BAD_FRAME          : integer := 1;
            RX_DROP_WHEN_FULL          : integer := 1
        );
        port (
            rst                    : in  std_logic;
            logic_clk             : in  std_logic;
            logic_rst             : in  std_logic;
            tx_axis_tdata         : in  std_logic_vector(AXIS_DATA_WIDTH-1 downto 0);
            tx_axis_tkeep         : in  std_logic_vector(AXIS_KEEP_WIDTH-1 downto 0) := (others => '1');
            tx_axis_tvalid        : in  std_logic;
            tx_axis_tready        : out std_logic;
            tx_axis_tlast         : in  std_logic;
            tx_axis_tuser         : in  std_logic;
            rx_axis_tdata         : out std_logic_vector(AXIS_DATA_WIDTH-1 downto 0);
            rx_axis_tkeep         : out std_logic_vector(AXIS_KEEP_WIDTH-1 downto 0);
            rx_axis_tvalid        : out std_logic;
            rx_axis_tready        : in  std_logic;
            rx_axis_tlast         : out std_logic;
            rx_axis_tuser         : out std_logic;
            mii_rx_clk            : in  std_logic;
            mii_rxd               : in  std_logic_vector(3 downto 0);
            mii_rx_dv             : in  std_logic;
            mii_rx_er             : in  std_logic;
            mii_tx_clk            : in  std_logic;
            mii_txd               : out std_logic_vector(3 downto 0);
            mii_tx_en             : out std_logic;
            mii_tx_er             : out std_logic;
            tx_error_underflow    : out std_logic;
            tx_fifo_overflow      : out std_logic;
            tx_fifo_bad_frame     : out std_logic;
            tx_fifo_good_frame    : out std_logic;
            rx_error_bad_frame    : out std_logic;
            rx_error_bad_fcs      : out std_logic;
            rx_fifo_overflow      : out std_logic;
            rx_fifo_bad_frame     : out std_logic;
            rx_fifo_good_frame    : out std_logic;
            ifg_delay             : in  unsigned(7 downto 0)
        );
    end component;

    component eth_axis_rx is
        generic (
            DATA_WIDTH  : integer := 8;
            KEEP_ENABLE : integer := 1;
            KEEP_WIDTH  : integer := 1
        );
        port (
            clk                           : in  std_logic;
            rst                           : in  std_logic;

            -- AXI input
            s_axis_tdata                  : in  std_logic_vector(DATA_WIDTH-1 downto 0);
            s_axis_tkeep                  : in  std_logic_vector(KEEP_WIDTH-1 downto 0) := (others => '1');
            s_axis_tvalid                 : in  std_logic;
            s_axis_tready                 : out std_logic;
            s_axis_tlast                  : in  std_logic;
            s_axis_tuser                  : in  std_logic;

            -- Ethernet frame output
            m_eth_hdr_valid               : out std_logic;
            m_eth_hdr_ready               : in  std_logic;
            m_eth_dest_mac                : out std_logic_vector(47 downto 0);
            m_eth_src_mac                 : out std_logic_vector(47 downto 0);
            m_eth_type                    : out std_logic_vector(15 downto 0);
            m_eth_payload_axis_tdata     : out std_logic_vector(DATA_WIDTH-1 downto 0);
            m_eth_payload_axis_tkeep     : out std_logic_vector(KEEP_WIDTH-1 downto 0);
            m_eth_payload_axis_tvalid    : out std_logic;
            m_eth_payload_axis_tready    : in  std_logic;
            m_eth_payload_axis_tlast     : out std_logic;
            m_eth_payload_axis_tuser     : out std_logic;

            -- Status signals
            busy                          : out std_logic;
            error_header_early_termination : out std_logic
        );
    end component;

    component eth_axis_tx is
        generic (
            DATA_WIDTH : integer := 8;
            KEEP_ENABLE : integer := 1;
            KEEP_WIDTH : integer := 1
        );
        port (
            clk  : in  std_logic;
            rst  : in  std_logic;

            -- Ethernet frame input
            s_eth_hdr_valid : in  std_logic;
            s_eth_hdr_ready : out std_logic;
            s_eth_dest_mac  : in  std_logic_vector(47 downto 0);
            s_eth_src_mac   : in  std_logic_vector(47 downto 0);
            s_eth_type      : in  std_logic_vector(15 downto 0);
            s_eth_payload_axis_tdata  : in  std_logic_vector(DATA_WIDTH-1 downto 0);
            s_eth_payload_axis_tkeep  : in  std_logic_vector(KEEP_WIDTH-1 downto 0) := (others => '1');
            s_eth_payload_axis_tvalid : in  std_logic;
            s_eth_payload_axis_tready : out std_logic;
            s_eth_payload_axis_tlast  : in  std_logic;
            s_eth_payload_axis_tuser  : in  std_logic;

            -- AXI output
            m_axis_tdata  : out std_logic_vector(DATA_WIDTH-1 downto 0);
            m_axis_tkeep  : out std_logic_vector(KEEP_WIDTH-1 downto 0);
            m_axis_tvalid : out std_logic;
            m_axis_tready : in  std_logic;
            m_axis_tlast  : out std_logic;
            m_axis_tuser  : out std_logic;

            -- Status
            busy : out std_logic
        );
    end component;

    component udp_complete is
        generic (
            ARP_CACHE_ADDR_WIDTH         : integer := 9;
            ARP_REQUEST_RETRY_COUNT      : integer := 4;
            ARP_REQUEST_RETRY_INTERVAL   : integer := 125000000*2;
            ARP_REQUEST_TIMEOUT          : integer := 125000000*30;
            UDP_CHECKSUM_GEN_ENABLE      : integer := 1;
            UDP_CHECKSUM_PAYLOAD_FIFO_DEPTH : integer := 2048;
            UDP_CHECKSUM_HEADER_FIFO_DEPTH  : integer := 8
        );
        port (
            clk   : in  std_logic;
            rst   : in  std_logic;

            -- Ethernet frame input
            s_eth_hdr_valid         : in  std_logic;
            s_eth_hdr_ready         : out std_logic;
            s_eth_dest_mac          : in  std_logic_vector(47 downto 0);
            s_eth_src_mac           : in  std_logic_vector(47 downto 0);
            s_eth_type              : in  std_logic_vector(15 downto 0);
            s_eth_payload_axis_tdata : in  std_logic_vector(7 downto 0);
            s_eth_payload_axis_tvalid: in  std_logic;
            s_eth_payload_axis_tready: out std_logic;
            s_eth_payload_axis_tlast : in  std_logic;
            s_eth_payload_axis_tuser : in  std_logic;

            -- Ethernet frame output
            m_eth_hdr_valid         : out std_logic;
            m_eth_hdr_ready         : in  std_logic;
            m_eth_dest_mac          : out std_logic_vector(47 downto 0);
            m_eth_src_mac           : out std_logic_vector(47 downto 0);
            m_eth_type              : out std_logic_vector(15 downto 0);
            m_eth_payload_axis_tdata : out std_logic_vector(7 downto 0);
            m_eth_payload_axis_tvalid: out std_logic;
            m_eth_payload_axis_tready: in  std_logic;
            m_eth_payload_axis_tlast : out std_logic;
            m_eth_payload_axis_tuser : out std_logic;

            -- IP input
            s_ip_hdr_valid          : in  std_logic;
            s_ip_hdr_ready          : out std_logic;
            s_ip_dscp               : in  std_logic_vector(5 downto 0);
            s_ip_ecn                : in  std_logic_vector(1 downto 0);
            s_ip_length             : in  unsigned(15 downto 0);
            s_ip_ttl                : in  unsigned(7 downto 0);
            s_ip_protocol           : in  unsigned(7 downto 0);
            s_ip_source_ip          : in  unsigned(31 downto 0);
            s_ip_dest_ip            : in  unsigned(31 downto 0);
            s_ip_payload_axis_tdata : in  std_logic_vector(7 downto 0);
            s_ip_payload_axis_tvalid: in  std_logic;
            s_ip_payload_axis_tready: out std_logic;
            s_ip_payload_axis_tlast : in  std_logic;
            s_ip_payload_axis_tuser : in  std_logic;

            -- IP output
            m_ip_hdr_valid          : out std_logic;
            m_ip_hdr_ready          : in  std_logic;
            m_ip_eth_dest_mac       : out std_logic_vector(47 downto 0);
            m_ip_eth_src_mac        : out std_logic_vector(47 downto 0);
            m_ip_eth_type           : out std_logic_vector(15 downto 0);
            m_ip_version            : out unsigned(3 downto 0);
            m_ip_ihl                : out unsigned(3 downto 0);
            m_ip_dscp               : out std_logic_vector(5 downto 0);
            m_ip_ecn                : out std_logic_vector(1 downto 0);
            m_ip_length             : out unsigned(15 downto 0);
            m_ip_identification     : out unsigned(15 downto 0);
            m_ip_flags              : out std_logic_vector(2 downto 0);
            m_ip_fragment_offset    : out unsigned(12 downto 0);
            m_ip_ttl                : out unsigned(7 downto 0);
            m_ip_protocol           : out unsigned(7 downto 0);
            m_ip_header_checksum    : out std_logic_vector(15 downto 0);
            m_ip_source_ip          : out unsigned(31 downto 0);
            m_ip_dest_ip            : out unsigned(31 downto 0);
            m_ip_payload_axis_tdata : out std_logic_vector(7 downto 0);
            m_ip_payload_axis_tvalid: out std_logic;
            m_ip_payload_axis_tready: in  std_logic;
            m_ip_payload_axis_tlast : out std_logic;
            m_ip_payload_axis_tuser : out std_logic;

            -- UDP input
            s_udp_hdr_valid         : in  std_logic;
            s_udp_hdr_ready         : out std_logic;
            s_udp_ip_dscp           : in  std_logic_vector(5 downto 0);
            s_udp_ip_ecn            : in  std_logic_vector(1 downto 0);
            s_udp_ip_ttl            : in  unsigned(7 downto 0);
            s_udp_ip_source_ip      : in  unsigned(31 downto 0);
            s_udp_ip_dest_ip        : in  unsigned(31 downto 0);
            s_udp_source_port       : in  unsigned(15 downto 0);
            s_udp_dest_port         : in  unsigned(15 downto 0);
            s_udp_length            : in  unsigned(15 downto 0);
            s_udp_checksum          : in  std_logic_vector(15 downto 0);
            s_udp_payload_axis_tdata : in  std_logic_vector(7 downto 0);
            s_udp_payload_axis_tvalid: in  std_logic;
            s_udp_payload_axis_tready: out std_logic;
            s_udp_payload_axis_tlast : in  std_logic;
            s_udp_payload_axis_tuser : in  std_logic;

            -- UDP output
            m_udp_hdr_valid         : out std_logic;
            m_udp_hdr_ready         : in  std_logic;
            m_udp_eth_dest_mac      : out std_logic_vector(47 downto 0);
            m_udp_eth_src_mac       : out std_logic_vector(47 downto 0);
            m_udp_eth_type          : out std_logic_vector(15 downto 0);
            m_udp_ip_version        : out unsigned(3 downto 0);
            m_udp_ip_ihl            : out unsigned(3 downto 0);
            m_udp_ip_dscp           : out std_logic_vector(5 downto 0);
            m_udp_ip_ecn            : out std_logic_vector(1 downto 0);
            m_udp_ip_length         : out unsigned(15 downto 0);
            m_udp_ip_identification : out unsigned(15 downto 0);
            m_udp_ip_flags          : out unsigned(2 downto 0);
            m_udp_ip_fragment_offset: out unsigned(12 downto 0);
            m_udp_ip_ttl            : out unsigned(7 downto 0);
            m_udp_ip_protocol       : out unsigned(7 downto 0);
            m_udp_ip_header_checksum: out std_logic_vector(15 downto 0);
            m_udp_ip_source_ip      : out unsigned(31 downto 0);
            m_udp_ip_dest_ip        : out unsigned(31 downto 0);
            m_udp_source_port       : out unsigned(15 downto 0);
            m_udp_dest_port         : out unsigned(15 downto 0);
            m_udp_length            : out unsigned(15 downto 0);
            m_udp_checksum          : out std_logic_vector(15 downto 0);
            m_udp_payload_axis_tdata : out std_logic_vector(7 downto 0);
            m_udp_payload_axis_tvalid: out std_logic;
            m_udp_payload_axis_tready: in  std_logic;
            m_udp_payload_axis_tlast : out std_logic;
            m_udp_payload_axis_tuser : out std_logic;

            -- Status
            ip_rx_busy                    : out std_logic;
            ip_tx_busy                    : out std_logic;
            udp_rx_busy                   : out std_logic;
            udp_tx_busy                   : out std_logic;
            ip_rx_error_header_early_termination : out std_logic;
            ip_rx_error_payload_early_termination: out std_logic;
            ip_rx_error_invalid_header          : out std_logic;
            ip_rx_error_invalid_checksum        : out std_logic;
            ip_tx_error_payload_early_termination : out std_logic;
            ip_tx_error_arp_failed              : out std_logic;
            udp_rx_error_header_early_termination : out std_logic;
            udp_rx_error_payload_early_termination: out std_logic;
            udp_tx_error_payload_early_termination: out std_logic;

            -- Configuration
            local_mac         : in  unsigned(47 downto 0);
            local_ip          : in  unsigned(31 downto 0);
            gateway_ip        : in  unsigned(31 downto 0);
            subnet_mask       : in  unsigned(31 downto 0);
            clear_arp_cache   : in  std_logic
        );
    end component;


end package components;
